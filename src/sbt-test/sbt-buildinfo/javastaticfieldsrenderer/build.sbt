import sbtbuildinfo.JavaStaticFieldsRenderer

lazy val check = taskKey[Unit]("checks this plugin")

ThisBuild / version := "0.1"
ThisBuild / scalaVersion := "2.12.12"
ThisBuild / homepage := Some(url("http://example.com"))
ThisBuild / licenses := Seq("MIT License" -> url("https://github.com/sbt/sbt-buildinfo/blob/master/LICENSE"))

lazy val root = (project in file("."))
  .enablePlugins(BuildInfoPlugin)
  .settings(
    name := "helloworld",
    crossPaths := false,
    autoScalaLibrary := false,
    buildInfoKeys := Seq(
      name,
      BuildInfoKey.map(version) { case (n, v) => "projectVersion" -> v.toDouble },
      scalaVersion,
      ivyXML,
      homepage,
      licenses,
      apiMappings,
      isSnapshot,
      "year" -> 2012,
      "sym" -> 'Foo,
      "now" -> java.time.LocalDate.parse("2021-11-02"),
      "instant" -> java.time.Instant.parse("2021-11-02T01:23:45.678Z"),
      BuildInfoKey.action("buildTime") { 1234L },
      target),
    buildInfoOptions ++= Seq(
      BuildInfoOption.ToJson,
      BuildInfoOption.ToMap,
    ),
    buildInfoRenderFactory := JavaStaticFieldsRenderer.apply,
    buildInfoPackage := "hello",
    scalacOptions ++= Seq("-Ywarn-unused-import", "-Xfatal-warnings", "-Yno-imports"),
    check := {
      val f = (sourceManaged in Compile).value / "sbt-buildinfo" / ("%s.java" format "BuildInfo")
      val lines = scala.io.Source.fromFile(f).getLines.toList
      lines match {
        case """// $COVERAGE-OFF$""" ::
          """package hello;""" ::
          """""" ::
          """/** This file was generated by sbt-buildinfo. */""" ::
          """public final class BuildInfo {""" ::
          """  private BuildInfo() {}""" ::
          """""" ::
          """  /** The value is "helloworld". */""" ::
          """  public static final String name = "helloworld";""" ::
          """  /** The value is "2.12.12". */""" ::
          """  public static final String scalaVersion = "2.12.12";""" ::
          """  /** The value is java.util.Optional.of(internalAsUrl("http://example.com")). */""" ::
          """  public static final java.util.Optional<java.net.URL> homepage = java.util.Optional.of(internalAsUrl("http://example.com"));""" ::
          """  /** The value is java.util.Collections.unmodifiableList(java.util.Arrays.asList(new java.util.AbstractMap.SimpleImmutableEntry<>("MIT License", internalAsUrl("https://github.com/sbt/sbt-buildinfo/blob/master/LICENSE")))). */""" ::
          """  public static final java.util.Collection<java.util.Map.Entry<String, java.net.URL>> licenses = java.util.Collections.unmodifiableList(java.util.Arrays.asList(new java.util.AbstractMap.SimpleImmutableEntry<>("MIT License", internalAsUrl("https://github.com/sbt/sbt-buildinfo/blob/master/LICENSE"))));""" ::
          """  /** The value is internalAsMap(). */""" ::
          """  public static final java.util.Map<java.io.File, java.net.URL> apiMappings = internalAsMap();""" ::
          """  /** The value is false. */""" ::
          """  public static final Boolean isSnapshot = false;""" ::
          """  /** The value is 2012. */""" ::
          """  public static final Integer year = 2012;""" ::
          """  /** The value is ("Foo").intern(). */""" ::
          """  public static final String sym = ("Foo").intern();""" ::
          """  /** The value is java.time.LocalDate.parse("2021-11-02"). */""" ::
          """  public static final java.time.LocalDate now = java.time.LocalDate.parse("2021-11-02");""" ::
          """  /** The value is java.time.Instant.parse("2021-11-02T01:23:45.678Z"). */""" ::
          """  public static final java.time.Instant instant = java.time.Instant.parse("2021-11-02T01:23:45.678Z");""" ::
          """  /** The value is 1234L. */""" ::
          """  public static final Long buildTime = 1234L;""" ::
          targetInfoComment ::
          targetInfo ::
          """""" ::
          """  public static String makeString() {""" ::
          """    return String.format("name: %s, scalaVersion: %s, homepage: %s, licenses: %s, apiMappings: %s, isSnapshot: %s, year: %s, sym: %s, now: %s, instant: %s, buildTime: %s, target: %s",""" ::
          """      name, scalaVersion, homepage, licenses, apiMappings, isSnapshot, year, sym, now, instant, buildTime, target""" ::
          """    );""" ::
          """  }""" ::
          """""" ::
          """  public static java.util.Map<String, Object> makeMap() {""" ::
          """    java.util.Map<String, Object> m = new java.util.HashMap<>();""" ::
          """    m.put("name", name);""" ::
          """    m.put("scalaVersion", scalaVersion);""" ::
          """    m.put("homepage", homepage);""" ::
          """    m.put("licenses", licenses);""" ::
          """    m.put("apiMappings", apiMappings);""" ::
          """    m.put("isSnapshot", isSnapshot);""" ::
          """    m.put("year", year);""" ::
          """    m.put("sym", sym);""" ::
          """    m.put("now", now);""" ::
          """    m.put("instant", instant);""" ::
          """    m.put("buildTime", buildTime);""" ::
          """    m.put("target", target);""" ::
          """    return java.util.Collections.unmodifiableMap(m);""" ::
          """  }""" ::
          """""" ::
          """  private static java.net.URL internalAsUrl(String urlString) {""" ::
          """    try {""" ::
          """      return new java.net.URL(urlString);""" ::
          """    } catch (Exception e) {""" ::
          """      return null;""" ::
          """    }""" ::
          """  }""" ::
          """""" ::
          """  @SuppressWarnings({"unchecked", "rawtypes"})""" ::
          """  private static <K, V> java.util.Map<K, V> internalAsMap(java.util.Map.Entry... entries) {""" ::
          """    java.util.Map<K, V> m = new java.util.HashMap<>();""" ::
          """    for (java.util.Map.Entry e : entries) {""" ::
          """      m.put((K) e.getKey(), (V) e.getValue());""" ::
          """    }""" ::
          """    return java.util.Collections.unmodifiableMap(m);""" ::
          """  }""" ::
          """""" ::
          """  private static String quote(Object x) {""" ::
          """    return "\"" + x + "\"";""" ::
          """  }""" ::
          """""" ::
          """  @SuppressWarnings({"unchecked"})""" ::
          """  private static String toJsonValue(Object value) {""" ::
          """    if (value instanceof java.util.Collection) {""" ::
          """      return ((java.util.Collection<Object>) value)""" ::
          """          .stream().map(BuildInfo::toJsonValue).collect(java.util.stream.Collectors.joining(",", "[", "]"));""" ::
          """    } else if (value instanceof java.util.Optional) {""" ::
          """      return ((java.util.Optional<Object>) value).map(BuildInfo::toJsonValue).orElse("null");""" ::
          """    } else if (value instanceof java.util.Map) {""" ::
          """      return ((java.util.Map<Object, Object>) value)""" ::
          """          .entrySet().stream()""" ::
          """              .map(e -> toJsonValue(e.getKey().toString()) + ":" + toJsonValue(e.getValue()))""" ::
          """              .collect(java.util.stream.Collectors.joining(", ", "{", "}"));""" ::
          """    } else if (value instanceof Double) {""" ::
          """      return value.toString();""" ::
          """    } else if (value instanceof Float) {""" ::
          """      return value.toString();""" ::
          """    } else if (value instanceof Long) {""" ::
          """      return value.toString();""" ::
          """    } else if (value instanceof Integer) {""" ::
          """      return value.toString();""" ::
          """    } else if (value instanceof Short) {""" ::
          """      return value.toString();""" ::
          """    } else if (value instanceof Boolean) {""" ::
          """      return value.toString();""" ::
          """    } else if (value instanceof String) {""" ::
          """      return quote(value);""" ::
          """    } else {""" ::
          """      return quote(value.toString());""" ::
          """    }""" ::
          """  }""" ::
          """""" ::
          """  public static final String makeJson = toJsonValue(makeMap());""" ::
          """}""" ::
          """// $COVERAGE-ON$""" :: Nil if ((targetInfo contains "public static final java.io.File target = new java.io.File(") && (targetInfoComment contains "/** The value is new java.io.File(")) =>
        case _ => sys.error("unexpected output: \n" + lines.mkString("\n"))
      }
      ()
    }
  )

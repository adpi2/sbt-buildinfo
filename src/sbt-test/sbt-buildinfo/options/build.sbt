lazy val check = taskKey[Unit]("checks this plugin")

ThisBuild / version := "0.1"
ThisBuild / scalaVersion := "2.12.12"

lazy val root = (project in file("."))
  .enablePlugins(BuildInfoPlugin)
  .settings(
    name := "helloworld",
    buildInfoKeys := Seq(
      name,
      scalaVersion,
    ),
    buildInfoPackage := "hello",
    buildInfoOptions ++= Seq(
      BuildInfoOption.ToJson,
      BuildInfoOption.ToMap,
      BuildInfoOption.Traits("TestTrait1", "TestTrait2"),
      BuildInfoOption.Traits("TestTrait3"),
      BuildInfoOption.PackagePrivate,
      BuildInfoOption.ImportScalaPredef,
    ),
    homepage := Some(url("http://example.com")),
    licenses := Seq("MIT License" -> url("https://github.com/sbt/sbt-buildinfo/blob/master/LICENSE")),
    scalacOptions ++= Seq("-Xlint", "-Xfatal-warnings", "-Yno-imports"),
    check := {
      val f = (Compile / sourceManaged).value / "sbt-buildinfo" / ("%s.scala" format "BuildInfo")
      val lines = scala.io.Source.fromFile(f).getLines.toList
      lines match {
        case  """// $COVERAGE-OFF$""" ::
              """package hello""" ::
              """""" ::
              """import scala.Predef._""" ::
              """""" ::
              """/** This object was generated by sbt-buildinfo. */""" ::
              """private[hello] case object BuildInfo extends TestTrait1 with TestTrait2 with TestTrait3 {""" ::
              """  /** The value is "helloworld". */""" ::
              """  val name: String = "helloworld"""" ::
              """  /** The value is "2.12.12". */""" ::
              """  val scalaVersion: String = "2.12.12"""" ::
              """  override val toString: String = {""" ::
              """    "name: %s, scalaVersion: %s".format(""" ::
              """      name, scalaVersion""" ::
              """    )""" ::
              """  }""" ::
              """  val toMap: Map[String, scala.Any] = Map[String, scala.Any](""" ::
              """    "name" -> name,""" ::
              """    "scalaVersion" -> scalaVersion)""" ::
              """""" ::
              """  private def quote(x: scala.Any): String = "\"" + x + "\""""" ::
              """  private def toJsonValue(value: scala.Any): String = {""" ::
              """    value match {""" ::
              """      case elem: scala.collection.Seq[_] => elem.map(toJsonValue).mkString("[", ",", "]")""" ::
              """      case elem: scala.Option[_] => elem.map(toJsonValue).getOrElse("null")""" ::
              """      case elem: scala.collection.Map[_, scala.Any] => elem.map {""" ::
              """        case (k, v) => toJsonValue(k.toString) + ":" + toJsonValue(v)""" ::
              """      }.mkString("{", ", ", "}")""" ::
              """      case d: scala.Double => d.toString""" ::
              """      case f: scala.Float => f.toString""" ::
              """      case l: scala.Long => l.toString""" ::
              """      case i: scala.Int => i.toString""" ::
              """      case s: scala.Short => s.toString""" ::
              """      case bool: scala.Boolean => bool.toString""" ::
              """      case str: String => quote(str)""" ::
              """      case other => quote(other.toString)""" ::
              """    }""" ::
              """  }""" ::
              """""" ::
              """  val toJson: String = toJsonValue(toMap)""" ::
              """}""" ::
              """// $COVERAGE-ON$""" ::
              Nil =>
        case _    => sys.error("unexpected output: \n" + lines.mkString("\n"))
      }
      ()
    }
  )

lazy val check = taskKey[Unit]("check")

ThisBuild / version := "0.1"
ThisBuild / organization := "com.example"
ThisBuild / scalaVersion := "2.13.3"
ThisBuild / homepage := Some(url("http://example.com"))
ThisBuild / licenses := Seq("MIT License" -> url("https://github.com/sbt/sbt-buildinfo/blob/master/LICENSE"))

lazy val root = (project in file("."))
  .aggregate(app)

lazy val app = (project in file("app"))
  .enablePlugins(BuildInfoPlugin)
  .settings(
    name := "sbt-buildinfo-example-app",
    buildInfoKeys := Seq(name,
                         projectID in LocalProject("root"),
                         version,
                         BuildInfoKey.map(homepage) { case (n, opt) => n -> opt.get },
                         scalaVersion),
    buildInfoPackage := "hello",
    buildInfoOptions := Seq(BuildInfoOption.ImportScalaPredef),
    scalacOptions ++= Seq("-Xlint", "-Xfatal-warnings", "-Yno-imports"),
    check := {
      val sv = scalaVersion.value
      val f = (sourceManaged in Compile).value / "sbt-buildinfo" / ("%s.scala" format "BuildInfo")
      val lines = scala.io.Source.fromFile(f).getLines.toList
      lines match {
        case """// $COVERAGE-OFF$""" ::
             """package hello""" ::
             """""" ::
             """import scala.Predef._""" ::
             """""" ::
             """/** This object was generated by sbt-buildinfo. */""" ::
             """case object BuildInfo {""" ::
             """  /** The value is "sbt-buildinfo-example-app". */""" ::
             """  val name: String = "sbt-buildinfo-example-app"""" ::
             """  /** The value is "com.example:root:0.1". */""" ::
             """  val projectID: String = "com.example:root:0.1"""" ::
             """  /** The value is "0.1". */""" ::
             """  val version: String = "0.1"""" ::
             """  /** The value is new java.net.URI("http://example.com").toURL. */""" ::
             """  val homepage = new java.net.URI("http://example.com").toURL""" ::
             scalaVersionInfoComment ::
             scalaVersionInfo ::
             """  override val toString: String = {""" ::
             """    "name: %s, projectID: %s, version: %s, homepage: %s, scalaVersion: %s".format(""" ::
             """      name, projectID, version, homepage, scalaVersion""" ::
             """    )""" ::
             """  }""" ::
             """}""" ::
             """// $COVERAGE-ON$""" :: Nil if (scalaVersionInfo.trim == s"""val scalaVersion: String = "$sv"""") => ()
        case _ => sys.error("unexpected output: " + lines.mkString("\n"))
      }
      ()
    }
  )
